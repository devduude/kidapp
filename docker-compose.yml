services:
  postgres:
    image: postgres:17.4-alpine3.21
    container_name: kidapp-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: kidapp
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kidapp-network

  db-init:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile.init
    container_name: kidapp-db-init
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: kidapp
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kidapp-network
    restart: "no"

  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    container_name: kidapp-backend
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: kidapp
      PORT: 3000
    ports:
      - "3000:3000"  # For dev. Remove in production with load balancer
    depends_on:
      postgres:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    networks:
      - kidapp-network
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3000/api/v1
    ports:
      - "4200:4200"  # For dev. Remove in production with load balancer
    depends_on:
      - backend
    networks:
      - kidapp-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  kidapp-network:
    driver: bridge
